#!/bin/bash

# include the libraries
source 'lib/all'

# initial values
ip=''
portsPositive=()
portsNegative=()
sslCheck=()
declare -A aRecords
declare -A mxRecords
declare -A statusCodeCheck

# declare parameter list array
PARAMETERS=()

currentDomain=""
currentCredentials=""

# read arguments
while [[ $# > 0 ]]; do
  case "$1" in
    #
    # port positive
    #
    -pp|-p+|--port-positive)
      portsPositive+=("$2")
      shift
    ;;
    -pp=*|-p+=*|--port-positive=*)
      portsPositive+=("${1#*=}")
    ;;

    #
    # port negative
    #
    -pn|-p-|--port-negative)
      portsNegative+=("$2")
      shift
    ;;
    -pn=*|-p-=*|--port-negative=*)
      portsNegative+=("${1#*=}")
    ;;

    # -sc,   --status-code                      Checks that a given url returns an expected status code (http:80). Needs a -dn option before.
    #
    #        option (-dn domain.tld)            url check                                     expected return
    #        -------------------------------------------------------------------------------------------------------------------------------------
    #        -sc 301                            http://domain.tld                             301
    #        -sc >                              http://domain.tld                             301
    #        -sc 301|https://domain.tld         http://domain.tld                             301 with target https://domain.tld
    #        -sc >https                         http://(domain.tld)                           301 with target https://$1
    #        -sc >/redirect/home.html           http://(domain.tld)                           301 with target http://$1/redirect/home.html
    #
    -sc|--status-code)
        statusCodeCheck["http://$currentCredentials$currentDomain"]="$2"
        shift
    ;;
    -sc=*|--status-code=*)
        statusCodeCheck["http://$currentCredentials$currentDomain"]="${1#*=}"
    ;;

    # -ssc,  --secure-status-code               Checks that a given url returns an expected status code (https:443). Needs a -dn option before.
    #
    #        option (-dn domain.tld)            url check                                     expected return
    #        -------------------------------------------------------------------------------------------------------------------------------------
    #        -ssc 401                           https://domain.tld                            401 (password protection)
    #        -ssc user:pass@200                 https://user:pass@domain.tld                  200
    #        -cre user:pass                     >> set credentials for the following checks
    #        -ssc 200                           https://user:pass@domain.tld                  200
    #        -ssc user:wrongpass@401            https://user:wrongpass@domain.tld             401
    #        -cre-                              >> remove credentials
    #        -ssc 401                           https://domain.tld                            401 (password protection)
    #        -ssc user:pass@404:/server-status  https://user:pass@domain.tld/server-status    404
    #        -ssc 404:/nonexisting.html         https://domain.tld/nonexisting.html           404
    #
    -ssc|--secure-status-code)
        statusCodeCheck["https://$currentCredentials$currentDomain"]="$2"
        shift
    ;;
    -ssc=*|--secure-status-code=*)
        statusCodeCheck["https://$currentCredentials$currentDomain"]="${1#*=}"
    ;;

    # -dn,   --set-domainname                   Sets the current domain name. With this set domain name other commands can be combined.
    #
    -dn|--domainname)
        currentDomain="$2"
        aRecords[$currentDomain]=true
        shift
    ;;
    -dn=*|--domainname=*)
        currentDomain="${1#*=}"
        aRecords[$currentDomain]=true
    ;;

    # -cre,  --set-credenial                    Sets the current webserver credentials. With this set credentials other commands can be combined.
    #
    -cre|--credential)
        currentCredentials="$2@"
        shift
    ;;
    -cre=*|--credential=*)
        currentCredentials="${1#*=}@"
    ;;

    # -ssl,  --check-ssl-certificate            Checks the ssl certificate. Needs a -dn option before.
    #
    -ssl)
        if [ "$currentDomain" == "" ]; then
            log 'error' "Please specifiy the domain name (-dn) first, before use -ssl option."
            exit
        fi

        sslCheck+=("$currentDomain")
    ;;

    #
    # collect these unknown parameters
    #
    *)
      PARAMETERS+=("$1")
    ;;
  esac
  shift
done

# check ip parameter
if [ ${#PARAMETERS[@]} -lt 1 ]; then
    log 'error' "No server host name or ip address is given"
    exit
fi

# save the ip address
ip="${PARAMETERS[0]}"

allPassed=true

# check if server is running
if isPingableCheck "$ip"; then
    pingable=true
else
    allPassed=false
fi

# check positive ports
for port in "${portsPositive[@]}"; do
    if ! isPortOpenCheck "$ip" "$port"; then
        allPassed=false
    fi
done

# check negative ports
for port in "${portsNegative[@]}"; do
    if ! isNotPortOpenCheck "$ip" "$port"; then
        allPassed=false
    fi
done

# a record check
for domain in "${!aRecords[@]}"; do
    if ! isDomainAssignedToIpCheck "$domain" "$ip"; then
        allPassed=false
    fi
done

# status code check
for url in "${!statusCodeCheck[@]}"; do
    expected="${statusCodeCheck[$url]}"

    if ! isHttpStatusCodeCheck "$url" "$expected"; then
        allPassed=false
    fi
done

# ssl check
for domain in "${sslCheck[@]}"; do
    certFile="/tmp/$domain.crt"
    chainfile="/tmp/$domain.ca"

    # get and save domain cert
    cert=$(getDomainCert "$domain")
    echo "$cert" > "$certFile"

    # get the issuer from domain cert
    issuer=$(getIssuer "$domain")

    # get and save the issuer certificate
    certChain=$(getChainCertificate "$domain")
  
    if [ "$certChain" == "" ]; then 
        log 'failed' "No chain certificate returned."
        allPassed=false
    else
        echo "$certChain" > "$chainfile"

        # check the certificates
        if ! isCertificateValid "$certFile" "$chainfile" "$domain"; then
            allPassed=false
        fi
        if ! isChainCertificateValid "$chainfile" "$issuer"; then
            allPassed=false
        fi

        # gets the status
        if ! isStatusOcspOk "$domain" "$chainfile" "$certFile"; then
            allPassed=false
        fi
    fi
done

# print all check status
if $allPassed; then
    log "passed" "All checks passed."
else
    log "failed" "At least one check is not passed."
fi


