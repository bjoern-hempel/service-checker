#!/bin/bash

# include the libraries
source 'lib/all'
source 'parameter'

# some params
configFile='environments.conf'

# check ip parameter
if [ ${#PARAMETERS[@]} -lt 1 ]; then
    if [ ! -f "$configFile" ]; then
        log 'error' "No server host name or ip address is given and no config file \"$configFile\" was found."
        exit
    fi

    cfgParser 'environments.conf' 'environment'

    # some vars
    declare -A keyToEnvironment

    # build menu
    lineTemplate="%2s %-20s %s"
    counter=0
    environmentList=""

    # build header
    environmentList+=$(printf "$lineTemplate" 'No' 'Name' 'IP')"\n"
    environmentList+=$(printf "%48s" | tr " " "-")"\n"

    # all function
    environment.all() {
        name='ALL'
        ip='ALL'
    }

    # add all option
    environmentFunctions=(environment.all "${environmentFunctions[@]}")
    environments=(all "${environments[@]}")

    # collect all environments
    for environmentFunction in "${environmentFunctions[@]}"; do
        $environmentFunction
        ((counter++))

        # build version number
        [ "$counter" -lt 10 ] && versionNumber=$counter || versionNumber=$(chr $((87 + counter)))

        # cancel loop if the output would be to much
        [ $counter -gt 34 ] && break

        # save environment call function
        keyToEnvironment[$versionNumber]="$environmentFunction"

        environmentList+=$(printf "$lineTemplate" "${COLOR_UNDERLINE}$versionNumber${COLOR_NORM})" $name $ip)"\n"
    done

    # read the input
    while true; do
        echo
        echo -e  "The following system test environments are available:"
        echo
        echo -en "$environmentList"
        echo
        echo -n  "Choose the environment number you would like to test: "
        read -n 1 environmentNumber && echo

        if [ "$environmentNumber" == $'\e' ]; then
            echo
            log "info" "Switch process was canceled by user."
            exit
        elif [ -z "${keyToEnvironment[$environmentNumber]}" ]; then
            echo && echo -e "${COLOR_RED}The entered version number $environmentNumber does not exist. Try another one.${COLOR_NORM}" && echo
        else
            break
        fi
    done

    echo 

    environmentFunction="${keyToEnvironment[$environmentNumber]}"
    allPassed=true

    if [ "$environmentFunction" == "environment.all" ]; then
        for environmentFunction in "${environmentFunctions[@]}"; do
            if [ "$environmentFunction" == "environment.all" ]; then
                continue
            fi

            $environmentFunction

            log 'header' "Check config $name"
            ./checker $ip $parameter

            lastStatus=$?

            if [ $lastStatus -gt 0 ]; then
                allPassed=false
            fi
        done
    else
        $environmentFunction

        log 'header' "Check config $name"
        ./checker $ip $parameter

        lastStatus=$?

        if [ $lastStatus -gt 0 ]; then
            allPassed=false
        fi

        exit;
    fi

    if $allPassed; then
        log 'header' 'Result'
        log 'passed' 'All checks passed'
        exit
    fi

    log 'header' 'Result'
    log 'failed' 'At least on check is failed'
    exit 1
fi

# save the ip address
ip="${PARAMETERS[0]}"

allPassed=true

# check if server is running
if isPingableCheck "$ip"; then
    pingable=true
else
    allPassed=false
fi

# check positive ports
for port in "${portsPositive[@]}"; do
    if ! isPortOpenCheck "$ip" "$port"; then
        allPassed=false
    fi
done

# check negative ports
for port in "${portsNegative[@]}"; do
    if ! isNotPortOpenCheck "$ip" "$port"; then
        allPassed=false
    fi
done

# a record check
for domain in "${!aRecords[@]}"; do
    if ! isDomainAssignedToIpCheck "$domain" "$ip"; then
        allPassed=false
    fi
done

# status code check
for url in "${!statusCodeCheck[@]}"; do
    ports="${statusCodeCheck[$url]}"

    if ! isHttpStatusCodeCheck "$url" "$ports"; then
        allPassed=false
    fi
done

# ssl check
for domain in "${sslCheck[@]}"; do
    certFile="/tmp/$domain.crt"
    chainfile="/tmp/$domain.ca"

    # get and save domain cert
    cert=$(getDomainCert "$domain")
    echo "$cert" > "$certFile"

    # get the issuer from domain cert
    issuer=$(getIssuer "$domain")

    # get and save the issuer certificate
    certChain=$(getChainCertificate "$domain")
  
    if [ "$certChain" == "" ]; then 
        log 'failed' "No chain certificate returned."
        allPassed=false
    else
        echo "$certChain" > "$chainfile"

        # check the certificates
        if ! isCertificateVerified "$certFile" "$chainfile" "$domain"; then
            allPassed=false
        fi
        if ! isChainCertificateVerified "$chainfile" "$issuer"; then
            allPassed=false
        fi
        if ! isCertificateValid "$certFile" "$domain"; then
            allPassed=false
        fi
        if ! isDomainFromCertificate "$domain" "$certFile"; then
            allPassed=false
        fi

        # gets the status
        if ! isStatusOcspOk "$domain" "$chainfile" "$certFile"; then
            allPassed=false
        fi
    fi
done

# print all check status
if $allPassed; then
    log "passed" "All checks passed."
    exit 0
fi

log "failed" "At least one check is not passed."
exit 1


