#!/bin/bash

# include the libraries
source 'lib/all'

# initial values
ip=''
portsPositive=()
portsNegative=()
sslCheck=()
declare -A aRecords
declare -A mxRecords
declare -A statusCodeCheck

# declare parameter list array
PARAMETERS=()

currentDomain=""
currentCredentials=""

# read arguments
while [[ $# > 0 ]]; do
  case "$1" in
    #
    # port positive
    #
    -pp|-p+|--portPositive)
      portsPositive+=("$2")
      shift
    ;;
    -pp=*|-p+=*|--portNegative=*)
      portsPositive+=("${1#*=}")
    ;;

    #
    # port negative
    #
    -pn|-p-|--portNegative)
      portsNegative+=("$2")
      shift
    ;;
    -pn=*|-p-=*|--portNegative=*)
      portsNegative+=("${1#*=}")
    ;;

    -sc)
        statusCodeCheck["http://$currentCredentials$currentDomain"]="$2"
        shift
    ;;

    -ssc)
        statusCodeCheck["https://$currentCredentials$currentDomain"]="$2"
        shift
    ;;

    #
    # domain name
    #
    -dn|--domainName)
        currentDomain="$2"
        aRecords[$currentDomain]=true
        shift
    ;;
    -dn=*|--domainName=*)
        currentDomain="${1#*=}"
        aRecords[$currentDomain]=true
    ;;

    #
    # credentials
    #
    -cre|--credential)
        currentCredentials="$2@"
        shift
    ;;
    -cre=*|--credential=*)
        currentCredentials="${1#*=}@"
    ;;

    #
    # ssl
    #
    -ssl)
        if [ "$currentDomain" == "" ]; then
            log 'error' "Please specifiy the domain name (-dn) first, before use -ssl option."
            exit
        fi

        sslCheck+=("$currentDomain")
    ;;

    #
    # collect these unknown parameters
    #
    *)
      PARAMETERS+=("$1")
    ;;
  esac
  shift
done

# check ip parameter
if [ ${#PARAMETERS[@]} -lt 1 ]; then
    log 'error' "No server host name or ip address is given"
    exit
fi

# save the ip address
ip="${PARAMETERS[0]}"

allPassed=true

# check if server is running
if isPingableCheck "$ip"; then
    pingable=true
else
    allPassed=false
fi

# check positive ports
for port in "${portsPositive[@]}"; do
    if ! isPortOpenCheck "$ip" "$port"; then
        allPassed=false
    fi
done

# check negative ports
for port in "${portsNegative[@]}"; do
    if ! isNotPortOpenCheck "$ip" "$port"; then
        allPassed=false
    fi
done

# a record check
for domain in "${!aRecords[@]}"; do
    if ! isDomainAssignedToIpCheck "$domain" "$ip"; then
        allPassed=false
    fi
done

# status code check
for url in "${!statusCodeCheck[@]}"; do
    expected="${statusCodeCheck[$url]}"

    if ! isHttpStatusCodeCheck "$url" "$expected"; then
        allPassed=false
    fi
done

# ssl check
for domain in "${sslCheck[@]}"; do
    certFile="/tmp/$domain.crt"
    chainfile="/tmp/$domain.ca"

    # get and save domain cert
    cert=$(getDomainCert "$domain")
    echo "$cert" > "$certFile"

    # get the issuer from domain cert
    issuer=$(getIssuer "$domain")

    # get and save the issuer certificate
    certChain=$(getChainCertificate "$domain")
  
    if [ "$certChain" == "" ]; then 
        log 'failed' "No chain certificate returned."
        allPassed=false
    else
        echo "$certChain" > "$chainfile"

        # check the certificates
        if ! isCertificateValid "$certFile" "$chainfile" "$domain"; then
            allPassed=false
        fi
        if ! isChainCertificateValid "$chainfile" "$issuer"; then
            allPassed=false
        fi

        # gets the status
        if ! isStatusOcspOk "$domain" "$chainfile" "$certFile"; then
            allPassed=false
        fi
    fi
done

# print all check status
if $allPassed; then
    log "passed" "All checks passed."
else
    log "failed" "At least one check is not passed."
fi


