#!/bin/bash

# ------------
# The service checker is a tool to do some server checks. It can check the server
# accessibility, open and closed ports, dns settings, http status codes, ssl
# certificates, etc. It can send emails if any check is failed. With an environment
# file you can easily collect all server check configurations and use them as a cronjob
# task.
#
# @author    Björn Hempel <bjoern@hempel.li>
# @version   v0.0.12 (2017-07-16)
#
# @copyright MIT License
# @copyright
# @copyright Copyright (c) 2017 Björn Hempel
# @copyright
# @copyright Permission is hereby granted, free of charge, to any person obtaining a copy
# @copyright of this software and associated documentation files (the "Software"), to deal
# @copyright in the Software without restriction, including without limitation the rights
# @copyright to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# @copyright copies of the Software, and to permit persons to whom the Software is
# @copyright furnished to do so, subject to the following conditions:
# @copyright
# @copyright The above copyright notice and this permission notice shall be included in all
# @copyright copies or substantial portions of the Software.
# @copyright
# @copyright THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# @copyright IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# @copyright FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# @copyright AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# @copyright LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# @copyright OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# @copyright SOFTWARE.
# @copyright
# @copyright Written by Björn Hempel <bjoern@hempel.li>.
# ------------

# trap ctrl-c and exit
trap ctrlC INT
trap finish EXIT

# trap ctrl-c function
function ctrlC()
{
    echo && log 'info' "Script was cancelled by user (ctrl-c)."
    setCachedValue "$INI_FILE" scriptIsRunning false
    exit 0
}

# trap exit function
function finish()
{
    setCachedValue "$INI_FILE" scriptIsRunning false
}

# include the libraries
if [ -h "${BASH_SOURCE[0]}" ]; then
    filename=$(readlink "${BASH_SOURCE[0]}")
    pathRoot=$(dirname "$filename")"/.."
else
    pathRoot="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/.."
fi

# get the scriptname
if [[ "${BASH_SOURCE[0]}" =~ "/usr/local/bin" ]]; then
    scriptname=$(basename "${BASH_SOURCE[0]}")
else
    scriptname="${BASH_SOURCE[0]}"
fi

# the friends of bash detection and function loader
source "$pathRoot/lib/fobDetection"
source "$pathRoot/lib/functions"

# check installed friends of library apps
message=$(checkCurrentVersionNumbers "$pathRoot/.require")
lastStatus=$?
if [ $lastStatus -gt 0 ]; then
    echo "$message Abort.."
    exit 1
fi

# date (log file usage)
dateFile=$(date +%Y-%m-%d_%H%M%S)

# some params
CONFIG_ENVIRONMENT_FOLDER='/etc/service-checker'
  CONFIG_ENVIRONMENT_FILE='environments.conf'
     TMP_CONTENT_LOG_FILE="/tmp/service-checker.${dateFile}.log"
                 INI_FILE="/tmp/service-checker.ini"

# create ini file if not exists
if [ ! -f "$INI_FILE" ]; then
    touch "$INI_FILE"
fi

# get parent command
parentCommand="$(ps -o comm= $PPID)"
[ "$parentCommand" == "bash" ] && directCall=true || directCall=false

# is running check only for direct calls, otherwise ignore this
if $directCall; then
    # check running status
    scriptIsRunning=$(getCachedValue "$INI_FILE" scriptIsRunning false)

    # script is already running
    if $scriptIsRunning; then
        echo "Script is already running. Abort.."
        exit
    fi

    # set running flag
    setCachedValue "$INI_FILE" scriptIsRunning true
fi

# start environment loader
environmentLoader "$0" "$@"
lastStatus=$?

# environment loader was used. Stop here.
if [ $lastStatus -gt 0 ]; then
    ((lastStatus--))
    setCachedValue "$INI_FILE" scriptIsRunning false
    exit $lastStatus
fi

# output settings
resetOutputVars 45
if ! $suppressDirectOutput; then
    setOutputContentType "log:stdout"
fi

# include other libraries
source "$pathRoot/lib/arguments"

if [ "$emailAddress" != "" ]; then
    setOutputContentType "log:>${TMP_CONTENT_LOG_FILE}"
fi

# save the ip address
ip="${PARAMETERS[0]}"

# check identifier
if [ "$identifier" == "" ]; then
    identifier="$ip"
fi

# some other used vars
allPassed=true

# check for allowed systems
thisSystemIsAllowed=false
if [ "$allowedTestSystems" != "" ]; then
    ownIpAdress=$(getIpAddress)

    IFS=',' read -ra allowedIpAdresses <<< "$allowedTestSystems"
    for allowedIpAdress in "${allowedIpAdresses[@]}"; do
        if [ "$ownIpAdress" == "$allowedIpAdress" ]; then
            thisSystemIsAllowed=true
        fi
    done
else
    thisSystemIsAllowed=true
fi

# execute checks if allowed
if $thisSystemIsAllowed; then
    source "$pathRoot/lib/checks"
else
    outputContent "overall" "warning" "This system with the ip $ownIpAdress is not part of the given ip range:\n$allowedTestSystems\n All checks are ignored."
fi

# print all check status
if $allPassed; then
    exitType="passed"
    exitText="All checks passed."
    exitStatus=0
    sendErrorMail=false
else
    exitType="failed"
    exitText="At least one check is not passed."
    exitStatus=1
    sendErrorMail=true
fi

# print the last message (summary message)
outputContent "overall" "$exitType" "$exitText"
outputFinish

# send email if log file is available and email address given
if [ -f "$TMP_CONTENT_LOG_FILE" ]; then
    if [ "$emailAddress" != "" ]; then
        emailContent=$(cat "$TMP_CONTENT_LOG_FILE")
        sendErrorMailsTimeFiltered "$emailRelay" "$exitText" "$emailContent" "$emailAddress" "$fromEmailAddress" "$INI_FILE" "$identifier" $sendErrorMail $timeOutEmailDelivery $suppressDirectOutput
    fi

    rm "$TMP_CONTENT_LOG_FILE"
fi

# is running check only for direct calls, otherwise ignore this
if $directCall; then
    setCachedValue "$INI_FILE" scriptIsRunning false
fi

# throw the exit status
exit $exitStatus

