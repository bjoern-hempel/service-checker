#!/bin/bash

# initial values
ip=''
portsPositive=()
portsNegative=()
sslCheck=()
declare -A aRecords
declare -A mxRecords
declare -A statusCodeCheck

# declare parameter list array
PARAMETERS=()

currentDomain=""
currentCredentials=""

# read arguments
while [[ $# > 0 ]]; do
  case "$1" in
    # -p+,
    # -pp,   --port-positive           Checks that this given port is opened on the given machine.
    #
    -pp|-p+|--port-positive)
      portsPositive+=("$2")
      shift
    ;;
    -pp=*|-p+=*|--port-positive=*)
      portsPositive+=("${1#*=}")
    ;;

    # -p-,   --port-negative           Checks that this given port is closed on the given machine.
    # -pn,   -
    #
    -pn|-p-|--port-negative)
      portsNegative+=("$2")
      shift
    ;;
    -pn=*|-p-=*|--port-negative=*)
      portsNegative+=("${1#*=}")
    ;;

    # -sc,   --status-code             Checks that a given url returns an expected status code (http:80). Needs a -dn option before.
    #
    #        option (-dn domain.tld)                           url check                                     expected return
    #        ---------------------------------------------------------------------------------------------------------------------------------------------------------
    #        -sc 301                                           http://domain.tld                             301
    #        -sc >                                             http://domain.tld                             301
    #        -sc 301=https://domain.tld                        http://domain.tld                             301 with target https://domain.tld
    #        -sc >https                                        http://(domain.tld)                           301 with target https://$1
    #        -sc >/redirect/home.html                          http://(domain.tld)                           301 with target http://$1/redirect/home.html
    #
    -sc|--status-code)
        read url ports < <(getUrlAndPorts "http://$currentCredentials$currentDomain" "$2")
        statusCodeCheck["$url"]="$ports"
        shift
    ;;
    -sc=*|--status-code=*)
        read url ports < <(getUrlAndPorts "http://$currentCredentials$currentDomain" "${1#*=}")
        statusCodeCheck["$url"]="$ports"
    ;;

    # -ssc,  --secure-status-code      Checks that a given url returns an expected status code (https:443). Needs a -dn option before.
    #
    #        option (-dn domain.tld)                           url check                                     expected return
    #        ---------------------------------------------------------------------------------------------------------------------------------------------------------
    #        -ssc 401                                          https://domain.tld                            401 (password protection)
    #        -ssc user:pass@200                                https://user:pass@domain.tld                  200
    #        -cre user:pass                                    >> set credentials for the following checks
    #        -ssc 200                                          https://user:pass@domain.tld                  200
    #        -ssc user:wrongpass@401                           https://user:wrongpass@domain.tld             401
    #        -cre-                                             >> remove credentials
    #        -ssc 401                                          https://domain.tld                            401 (password protection)
    #        -ssc user:pass@404:/server-status                 https://user:pass@domain.tld/server-status    404
    #        -ssc 404:/nonexisting.html                        https://domain.tld/nonexisting.html           404
    #        -ssc 404,401:/typo3                               https://domain.tld/typo3                      404 or 401
    #        -ssc 404,401,301=https://typo3.domain.tld:/typo3  https://domain.tld/typo3                      404 or 401 or 301 with target https://typo3.domain.tld
    #
    -ssc|--secure-status-code)
        read url ports < <(getUrlAndPorts "https://$currentCredentials$currentDomain" "$2")
        statusCodeCheck["$url"]="$ports"
        shift
    ;;
    -ssc=*|--secure-status-code=*)
        read url ports < <(getUrlAndPorts "https://$currentCredentials$currentDomain" "${1#*=}")
        statusCodeCheck["$url"]="$ports"
    ;;

    # -dn,   --set-domainname          Sets the current domain name. With this set domain name other commands can be combined.
    #
    -dn|--domainname)
        currentDomain="$2"
        aRecords[$currentDomain]=true
        shift
    ;;
    -dn=*|--domainname=*)
        currentDomain="${1#*=}"
        aRecords[$currentDomain]=true
    ;;

    # -cre,  --set-credenial           Sets the current webserver credentials. With this set credentials other commands can be combined.
    #
    -cre|--credential)
        currentCredentials="$2@"
        shift
    ;;
    -cre=*|--credential=*)
        currentCredentials="${1#*=}@"
    ;;

    # -ssl,  --check-ssl-certificate   Checks the ssl certificate. Needs a -dn option before.
    #
    -ssl)
        if [ "$currentDomain" == "" ]; then
            log 'error' "Please specifiy the domain name (-dn) first, before use -ssl option."
            exit
        fi

        sslCheck+=("$currentDomain")
    ;;

    #
    # collect all unknown parameters
    #
    *)
      PARAMETERS+=("$1")
    ;;
  esac
  shift
done

