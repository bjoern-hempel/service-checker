#!/bin/bash

# ------------
# A install script to install the public scripts.
#
# @author    Björn Hempel <bjoern@hempel.li>
# @date      2017-04-26
# @version   1.0
#
# @copyright ISC License
# @copyright
# @copyright Copyright (c) 2017, Björn Hempel
# @copyright
# @copyright Permission to use, copy, modify, and/or distribute this software for any
# @copyright purpose with or without fee is hereby granted, provided that the above
# @copyright copyright notice and this permission notice appear in all copies.
# @copyright
# @copyright THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# @copyright REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# @copyright AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# @copyright INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# @copyright LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# @copyright OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# @copyright PERFORMANCE OF THIS SOFTWARE.
# @copyright
# @copyright Written by Björn Hempel <bjoern@hempel.li>.
# ------------

# git settings
friendsOfBashGitUri="git://github.com/bjoern-hempel/friends-of-bash.git"
serviceCheckerGitUri="git://github.com/bjoern-hempel/service-checker.git"

# some configs before
pathRoot="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# initial values
GLOBAL_INSTALLATION=false
CREATE_SYMLINKS=false
INSTALLATION=true
ROOT_UID=0

# declare parameter list array
PARAMETERS=()

# read arguments
while [[ $# > 0 ]]; do
    case "$1" in
        # log option (2 parameter)
        -g|--global)
            GLOBAL_INSTALLATION=true
        ;;

        # treat all other parameter as normal parameter
        *)
            PARAMETERS+=("$1")
        ;;
    esac
    shift
done

# the global mode needs root credentials
if $GLOBAL_INSTALLATION && [ "$UID" -ne "$ROOT_UID" ]; then
    echo "You need root credentials, if you want to make a global installation."
    exit 1
fi

# the local mode doesn't need root credentials
if ! $GLOBAL_INSTALLATION && [ "$UID" -eq "$ROOT_UID" ]; then
    echo "You try to make a local installation with root credentials (sudo). Please use the global parameter (-g) for a global installation or install it as a normal user."
    exit 1
fi

# detect friends of bash library → $friendsOfBashInclude
source "$pathRoot/lib/fobDetection"

# the friends of bash library was not found
if ! $friendsOfBashLibFound; then
    if $GLOBAL_INSTALLATION; then
           friendsOfBashPath="$friendsOfBashPathRemote"
        friendsOfBashInclude="$friendsOfBashIncludeRemote"
    else
           friendsOfBashPath="$friendsOfBashPathLocal"
        friendsOfBashInclude="$friendsOfBashIncludeLocal"
    fi

    git clone "$friendsOfBashGitUri" "$friendsOfBashPath"

    if [ ! -d "$friendsOfBashPath" ]; then
        echo "Error occurred while installing the friends of bash library. The folder \"$friendsOfBashPath\" was not found."
        exit 1
    fi

    if [ ! -f "$friendsOfBashInclude"  ]; then
        echo "Error occurred while installing the friends of bash library. The include file \"$friendsOfBashInclude\" was not found."
        exit 1
    fi
fi

# include friends of bash
source "$friendsOfBashInclude"

if $GLOBAL_INSTALLATION; then
    # TODO: git checkout to /opt if necessary
    # TODO: make ./install
    # TODO: do the following stuff

    # some configs
    declare -A installableApps
        installPath="/usr/local/bin"
         sourcePath="$pathRoot/bin"
    installableApps=([checker]=service-checker)

    # install all given apps
    for app in "${!installableApps[@]}"; do
        appTo="${installableApps[$app]}"

        installApp "$sourcePath/$app" "$installPath/$appTo"
    done
fi

# a success message - finish here
log "success" "The installation script was executed successfully."

