#!/bin/bash

# initial values
ip=''
portsPositive=()
portsNegative=()
sslCheck=()
statusCodeCheckUrls=()
declare -A aRecords
declare -A mxRecords
declare -A statusCodeCheckContent
declare currentDomains

# declare parameter list array
PARAMETERS=()

currentCredentials=""
emailAddress=""
fromEmailAddress=""
emailRelay="direct"
timeOutEmailDelivery=1800 # half an hour
identifier=""
suppressDirectOutput=false
pingEnabled=true
apacheHostViewerEnabled=false
apacheHostViewerCredentials=""
allowedTestSystems=""

# read arguments
# help:
# help: Usage: %scriptname% [options...] <ip>
while [[ $# > 0 ]]; do
    case "$1" in
        # help:  -p+,
        # help:  -pp,   --port-positive           Checks that this given port is opened on the given machine.
        # help:
        -pp|-p+|--port-positive)
            portsPositive+=("$2")
            shift
            ;;
        -pp=*|-p+=*|--port-positive=*)
            portsPositive+=("${1#*=}")
            ;;

        # help:  -p-,
        # help:  -pn,   --port-negative           Checks that this given port is closed on the given machine.
        # help:
        -pn|-p-|--port-negative)
            portsNegative+=("$2")
            shift
            ;;
        -pn=*|-p-=*|--port-negative=*)
            portsNegative+=("${1#*=}")
            ;;

        # help:  -sc,   --status-code             Checks that a given url returns an expected status code (http:80). Needs a -dn option before.
        # help:
        # help:         option (-dn domain.tld)                           url check                                     expected return
        # help:         ---------------------------------------------------------------------------------------------------------------------------------------------------------
        # help:         -sc 301                                           http://domain.tld                             301
        # help:         -sc >                                             http://domain.tld                             301
        # help:         -sc 301=https://domain.tld                        http://domain.tld                             301 with target https://domain.tld
        # help:         -sc >https                                        http://(domain.tld)                           301 with target https://$1
        # help:         -sc >/redirect/home.html                          http://(domain.tld)                           301 with target http://$1/redirect/home.html
        # help:
        -sc|--status-code)
            for currentDomain in "${currentDomains[@]}"; do
                read url ports < <(getUrlAndPorts "http://$currentCredentials$currentDomain" "$2")
                if [ -z ${statusCodeCheckContent["$url"]} ]; then
                    statusCodeCheckUrls+=("$url")
                    statusCodeCheckContent["$url"]="$ports"
                fi
            done
            shift
            ;;
        -sc=*|--status-code=*)
            for currentDomain in "${currentDomains[@]}"; do
                read url ports < <(getUrlAndPorts "http://$currentCredentials$currentDomain" "${1#*=}")
                if [ -z ${statusCodeCheckContent["$url"]} ]; then
                    statusCodeCheckUrls+=("$url")
                    statusCodeCheckContent["$url"]="$ports"
                fi
            done
            ;;

        # help:  -ssc,  --secure-status-code      Checks that a given url returns an expected status code (https:443). Needs a -dn option before.
        # help:
        # help:         option (-dn domain.tld)                           url check                                     expected return
        # help:         ---------------------------------------------------------------------------------------------------------------------------------------------------------
        # help:         -ssc 401                                          https://domain.tld                            401 (password protection)
        # help:         -ssc user:pass@200                                https://user:pass@domain.tld                  200
        # help:         -cre user:pass                                    >> set credentials for the following checks
        # help:         -ssc 200                                          https://user:pass@domain.tld                  200
        # help:         -ssc user:wrongpass@401                           https://user:wrongpass@domain.tld             401
        # help:         -cre-                                             >> remove credentials
        # help:         -ssc 401                                          https://domain.tld                            401 (password protection)
        # help:         -ssc user:pass@404:/server-status                 https://user:pass@domain.tld/server-status    404
        # help:         -ssc 404:/nonexisting.html                        https://domain.tld/nonexisting.html           404
        # help:         -ssc 404,401:/typo3                               https://domain.tld/typo3                      404 or 401
        # help:         -ssc 404,401,301=https://typo3.domain.tld:/typo3  https://domain.tld/typo3                      404 or 401 or 301 with target https://typo3.domain.tld
        # help:
        -ssc|--secure-status-code)
            for currentDomain in "${currentDomains[@]}"; do
                read url ports < <(getUrlAndPorts "https://$currentCredentials$currentDomain" "$2")
                if [ -z ${statusCodeCheckContent["$url"]} ]; then
                    statusCodeCheckUrls+=("$url")
                    statusCodeCheckContent["$url"]="$ports"
                fi
            done
            shift
            ;;
        -ssc=*|--secure-status-code=*)
            for currentDomain in "${currentDomains[@]}"; do
                read url ports < <(getUrlAndPorts "https://$currentCredentials$currentDomain" "${1#*=}")
                if [ -z ${statusCodeCheckContent["$url"]} ]; then
                    statusCodeCheckUrls+=("$url")
                    statusCodeCheckContent["$url"]="$ports"
                fi
            done
            ;;

        # help:  -dn,   --set-domainname          Sets the current domain name. With this set domain name other commands can be combined.
        -dn|--domainname)
            IFS=',' read -r -a currentDomains <<< "$2"
            for currentDomain in "${currentDomains[@]}"; do
                aRecords[$currentDomain]=true
            done
            shift
            ;;
        -dn=*|--domainname=*)
            IFS=',' read -r -a currentDomains <<< "${1#*=}"
            for currentDomain in "${currentDomains[@]}"; do
                aRecords[$currentDomain]=true
            done
            ;;

        # help:  -cre,  --set-credenial           Sets the current webserver credentials. With this set credentials other commands can be combined.
        -cre|--set-credential)
            currentCredentials="$2@"
            shift
            ;;
        -cre=*|--set-credential=*)
            currentCredentials="${1#*=}@"
            ;;

        # help:  -cre-, --remove-credenial        Removes the current set webserver credentials.
        -cre-|--remove-credenial)
            currentCredentials=""
            ;;

        # help:  -ssl,  --check-ssl-certificate   Checks the ssl certificate. Needs a -dn option before.
        # help:
        -ssl)
            if [ ${#currentDomains[@]} -le 0 ]; then
                log 'error' "Please specifiy the domain name (-dn) first, before use -ssl option."
                setCachedValue "$INI_FILE" scriptIsRunning false
                exit
            fi
            for currentDomain in "${currentDomains[@]}"; do
                sslCheck+=("$currentDomain")
            done
            ;;

        # help:  -ahv,  --apache-host-viewer      With this option you indicate that the reviewed server has the apache-host-viewer extension
        # help:                                   enabled or not. The apache-host-viewer is a self-diagnosis tool and gives you informations
        # help:                                   directly from the reviewed server. See https://github.com/bjoern-hempel/apache-host-viewer
        # help:                                   for more informations about that.
        -ahv|--apache-host-viewer)
            apacheHostViewerEnabled=true
            ;;
        -ahv=*|--apache-host-viewer=*)
            [ "${1#*=}" == "1" ] && apacheHostViewerEnabled=true || apacheHostViewerEnabled=false
            ;;

        # help:  -ahc,  --apache-host-credenials  Sets the apache host viewer credentials to access to this service. This option need the
        # help:                                   --apache-host-viewer option before.
        # help:
        -ahc|--apache-host-credentials)
            if ! $apacheHostViewerEnabled; then
                log 'error' "Please enable the apache-host-viewer check (--apache-host-viewer) before using the --apache-host-credentials option."
                setCachedValue "$INI_FILE" scriptIsRunning false
                exit
            fi
            apacheHostViewerCredentials="$2"
            shift
            ;;
        -ahc=*|--apache-host-credentials=*)
            if ! $apacheHostViewerEnabled; then
                log 'error' "Please enable the apache-host-viewer check (--apache-host-viewer) before using the --apache-host-credentials option."
                setCachedValue "$INI_FILE" scriptIsRunning false
                exit
            fi
            apacheHostViewerCredentials="${1#*=}"
            ;;

        # help:  -em,   --email                   Email addresses (comma separated) from recipients of the success and failed mails.
        -em|--email)
            emailAddress="$2"
            shift
            ;;
        -em=*|--email=*)
            emailAddress="${1#*=}"
            ;;

        # help:  -fe,   --from-email              From email address (used for success and failed mails).
        -fe|--from-email)
            fromEmailAddress="$2"
            shift
            ;;
        -fe=*|--from-email=*)
            fromEmailAddress="${1#*=}"
            ;;

        # help:  -er,   --email-relay             Change the email relay strategy (direct, docker:[name]).
        -er|--email-relay)
            emailRelay="$2"
            shift
            ;;
        -er=*|--email-relay=*)
            emailRelay="${1#*=}"
            ;;

        # help:  -to,   --time-out                Time out for email delivery (avoid mass email delivery)
        -to|--time-out)
            timeOutEmailDelivery="$2"
            shift
            ;;
        -to=*|--time-out=*)
            timeOutEmailDelivery="${1#*=}"
            ;;

        # help:  -json, --json-file               Adds the json log output.
        -json=*|--json-file=*)
            setOutputContentType "json:>${1#*=}"
            ;;
        -json|--json-file)
            setOutputContentType "json:>$2"
            shift
            ;;

        # help:  -log,  --log-file                Adds the log output.
        -log=*|--log-file=*)
            setOutputContentType "log:>>${1#*=}"
            ;;
        -log|--log-file)
            setOutputContentType "log:>>$2"
            shift
            ;;

        # help:  -id,   --identifier              An optional identifier which will be used for some information channels like email,
        # help:                                   etc. (if not given it uses the ip address)
        # help:
        -id|--identifier)
            identifier="$2"
            shift
            ;;
        -id=*|--identifier=*)
            identifier="${1#*=}"
            ;;

        # help:  -dp,   --disable-ping            Disable the ping check.
        # help:
        -dp|--disable-ping)
            pingEnabled=false
            ;;

        # help:  -ats,  --allowed-test-systems    Adds a range of system ips (cvs) of allowed test systems. This parameter is useful if the service-checker
        # help:                                   is used on multiple systems, but only one or a few of the server are allowed to test the given configuration.
        # help:
        -ats|--allowed-test-systems)
            allowedTestSystems="$2"
            shift
            ;;
        -ats=*|--allowed-test-systems=*)
            allowedTestSystems="${1#*=}"
            ;;

        # help:  -sdo,  --suppress-direct-output  1 - Suppress all directly printed outputs to screen (excluding log outputs, etc.); 0 - Don't suppress
        # help:
        -sdo|--suppress-direct-output)
            [ "$2" != "0" ] && suppressDirectOutput=true
            shift
            ;;
        -sdo=*|--suppress-direct-output=*)
            [ "${1#*=}" != "0" ] && suppressDirectOutput=true
            ;;

        # help:  -h,    --help                    Shows this help.
        # help:
        -h|--help)
            cat "$pathRoot/lib/parameter" | grep "# help:" | grep -v 'cat parameter' | sed 's/[ ]*# help:[ ]\?//g' | sed "s~%scriptname%~$scriptname~g"
            setCachedValue "$INI_FILE" scriptIsRunning false
            exit 0
            ;;

        #
        # collect all unknown parameters
        #
        *)
            PARAMETERS+=("$1")
            ;;
    esac
    shift
done

